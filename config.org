#+TITLE: Havner's Emacs configuration

* Packages
** Sources
#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/"))
#+END_SRC

** Hand addons (helpa)
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/helpa/emacs-color-theme-solarized")
  (require 'solarized-definitions)
  (add-to-list 'load-path "~/.emacs.d/helpa/spacemacs-theme")
  (require 'spacemacs-common)
#+END_SRC

* Functions
** General
#+BEGIN_SRC emacs-lisp
  (defun havner/open-config-org (&optional arg)
    (interactive "P")
    (let ((config "~/.emacs.d/config.org"))
      (if arg
          (find-file-other-window config)
        (find-file config))))
  (global-set-key (kbd "<f12>") 'havner/open-config-org)

  (defun havner/set-font (&optional arg)
    (interactive "NFont size: ")
    (let ((font-to-set (concat "Ubuntu Mono-" (number-to-string arg))))
      (set-face-attribute 'default nil :font font-to-set)
      (powerline-reset)))

  (defun havner/set-font-size (&optional arg)
    (interactive "NFont size: ")
    (set-face-attribute 'default nil :height (* arg 10))
    (powerline-reset))
  (global-set-key (kbd "<C-f12>") 'havner/set-font-size)

  (defun havner/match-paren (arg)
    "Go to the matching paren if on a paren; otherwise insert %."
    (interactive "p")
    (cond ((looking-at "\\s\(") (forward-list 1) (backward-char 1))
          ((looking-at "\\s\)") (forward-char 1) (backward-list 1))
          (t (self-insert-command (or arg 1)))))

  (defun havner/command-line-diff (switch)
    "EDiff two files from command line"
    (let ((file1 (pop command-line-args-left))
          (file2 (pop command-line-args-left)))
      (ediff file1 file2)))

  (defun havner/generate-scratch-buffer ()
    "Create and switch to a temporary scratch buffer with a random
       name."
    (interactive)
    (switch-to-buffer (make-temp-name "scratch-")))

  (defun havner/kill-current-buffer ()
    "Kill the current buffer without prompting."
    (interactive)
    (kill-buffer (current-buffer)))

  (defun havner/split-window-below-and-switch ()
    "Split the window horizontally, then switch to the new pane."
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))

  (defun havner/split-window-right-and-switch ()
    "Split the window vertically, then switch to the new pane."
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))

  (defun havner/delete-window-and-balance ()
    "Delete current window and balance"
    (interactive)
    (delete-window)
    (balance-windows))

  (defun havner/kill-buffer-and-window-and-balance ()
    "Kill buffer and window and balance"
    (interactive)
    (kill-buffer-and-window)
    (balance-windows))

  (defun havner/find-file-as-sudo ()
    (interactive)
    (let ((file-name (buffer-file-name)))
      (when file-name
        (find-alternate-file (concat "/sudo::" file-name)))))

  (let ((langs '("pl_PL" "en_US")))
    (setq havner/lang-ring (make-ring (length langs)))
    (dolist (elem langs) (ring-insert havner/lang-ring elem)))
  (defun havner/cycle-ispell-languages ()
    (interactive)
    (let ((lang (ring-ref havner/lang-ring -1)))
      (ring-insert havner/lang-ring lang)
      ;; (message "%s" lang)
      (ispell-change-dictionary lang)))

  (defun havner/display-prefix (arg)
    "Display the value of the raw prefix arg."
    (interactive "P")
    (message "%s" arg))

  (defun havner/de-unicode ()
    "Tidy up a buffer by replacing all special Unicode characters
       (smart quotes, etc.) with their more sane cousins"
    (interactive)
    (let ((unicode-map '(("[\u2018\|\u2019\|\u201A\|\uFFFD]" . "'")
                         ("[\u201c\|\u201d\|\u201e]" . "\"")
                         ("\u2013" . "--")
                         ("\u2014" . "---")
                         ("\u2026" . "...")
                         ("\u00A9" . "(c)")
                         ("\u00AE" . "(r)")
                         ("\u2122" . "TM")
                         ("[\u02DC\|\u00A0]" . " "))))
      (save-excursion
        (loop for (key . value) in unicode-map
              do
              (goto-char (point-min))
              (replace-regexp key value)))))

  (defun havner/completion-at-point (orig-fun &rest args)
    (if (eq (active-minibuffer-window)
            (selected-window))
        (apply orig-fun args)
      (company-complete)))

  (defun havner/eval-and-replace ()
    "Replace the preceding sexp with its value."
    (interactive)
    (backward-kill-sexp)
    (condition-case nil
        (prin1 (eval (read (current-kill 0)))
               (current-buffer))
      (error (message "Invalid expression")
             (insert (current-kill 0)))))
#+END_SRC

** Themes
#+BEGIN_SRC emacs-lisp
  (defun havner/disable-themes ()
    (interactive)
    (disable-theme 'solarized)
    (disable-theme 'sanityinc-solarized-dark)
    (disable-theme 'sanityinc-solarized-light)
    (disable-theme 'solarized-dark)
    (disable-theme 'solarized-light)
    (disable-theme 'spacemacs-dark)
    (disable-theme 'spacemacs-light))

  (defun havner/solarized-dark-load ()
    (setq frame-background-mode 'dark)
    (mapc 'frame-set-background-mode (frame-list))
    (load-theme 'solarized t))
  (defun havner/solarized-light-load ()
    (setq frame-background-mode 'light)
    (mapc 'frame-set-background-mode (frame-list))
    (load-theme 'solarized t))
  (defun havner/solarized-dark ()
    (interactive)
    (havner/disable-themes)
    (havner/solarized-dark-load)
    (powerline-reset))
  (defun havner/solarized-light ()
    (interactive)
    (havner/disable-themes)
    (havner/solarized-light-load)
    (powerline-reset))
  (defun havner/solarized-toggle ()
    "Toggle solarized mode"
    (interactive)
    (if (eq frame-background-mode 'dark)
        (havner/solarized-light)
      (havner/solarized-dark)))

  (defun havner/solarized2-dark-load ()
    (load-theme 'sanityinc-solarized-dark))
  (defun havner/solarized2-light-load ()
    (load-theme 'sanityinc-solarized-light))
  (defun havner/solarized2-dark ()
    (interactive)
    (havner/disable-themes)
    (havner/solarized2-dark-load)
    (powerline-reset))
  (defun havner/solarized2-light ()
    (interactive)
    (havner/disable-themes)
    (havner/solarized2-light-load)
    (powerline-reset))

  (defun havner/solarized3-dark-load ()
    (havner/solarized3-settings)
    (load-theme 'solarized-dark t))
  (defun havner/solarized3-light-load ()
    (havner/solarized3-settings)
    (load-theme 'solarized-light t))
  (defun havner/solarized3-dark ()
    (interactive)
    (havner/disable-themes)
    (havner/solarized3-dark-load)
    (powerline-reset))
  (defun havner/solarized3-light ()
    (interactive)
    (havner/disable-themes)
    (havner/solarized3-light-load)
    (powerline-reset))

  (defun havner/spacemacs-dark-load ()
    (havner/spacemacs-settings)
    (load-theme 'spacemacs-dark))
  (defun havner/spacemacs-light-load ()
    (havner/spacemacs-settings)
    (load-theme 'spacemacs-light))
  (defun havner/spacemacs-dark ()
    (interactive)
    (havner/disable-themes)
    (havner/spacemacs-dark-load)
    (powerline-reset))
  (defun havner/spacemacs-light ()
    (interactive)
    (havner/disable-themes)
    (havner/spacemacs-light-load)
    (powerline-reset))
#+END_SRC

* Configuration
** GOD mode
#+BEGIN_SRC emacs-lisp
  (god-mode)

  (defun my-update-cursor ()
    "Toggle cursor type on god-local-mode"
    (setq cursor-type (if (or god-local-mode)
                          'box
                        'bar)))

  (defun god-toggle-on-overwrite ()
    "Toggle god-mode on overwrite-mode."
    (if (bound-and-true-p overwrite-mode)
        (god-local-mode-pause)
      (god-local-mode-resume)))

  (when (bound-and-true-p god-global-mode)
    (add-hook 'god-mode-enabled-hook 'my-update-cursor)
    (add-hook 'god-mode-disabled-hook 'my-update-cursor)
    (add-to-list 'god-exempt-major-modes 'term-mode)
    (add-to-list 'god-exempt-major-modes 'bs-mode)

    (require 'god-mode-isearch)

    (add-hook 'overwrite-mode-hook 'god-toggle-on-overwrite)
    (add-hook 'god-mode-enabled-hook (lambda nil (interactive)
                                       (overwrite-mode 0))))
#+END_SRC

** Themes
#+BEGIN_SRC emacs-lisp
  (setq solarized-termcolors 16)

  (defun havner/solarized3-settings ()
    "Load solarized3 settings"
    (setq solarized-use-variable-pitch nil)
    (setq solarized-height-plus-1 1.0)
    (setq solarized-height-plus-2 1.0)
    (setq solarized-height-plus-3 1.0)
    (setq solarized-height-plus-4 1.0)
    (setq solarized-high-contrast-mode-line nil))

  (defun havner/spacemacs-settings ()
    (setq spacemacs-theme-comment-bg nil)
    (setq spacemacs-theme-comment-italic t)
    (setq spacemacs-theme-org-height nil))

  (cond (window-system
         (havner/spacemacs-dark-load))
        ((equal (getenv "TERM") "xterm-256color")
         (havner/solarized-dark-load))
        ((equal (getenv "TERM") "xterm-16color")
         (havner/solarized-dark-load)))
#+END_SRC

** Dashboard
#+BEGIN_SRC emacs-lisp
  ;; (setq dashboard-banner-logo-title "Abandon hope all ye who enter here")
  ;; ;; (setq dashboard-startup-banner "~/path/to/image.png")
  ;; (setq dashboard-items '(
  ;;                         (agenda . 5)
  ;;                         (bookmarks . 5)
  ;;                         (recents  . 5)
  ;;                         (projects . 5)
  ;;                         (registers . 5)
  ;;                         ))
  ;; (dashboard-setup-startup-hook)
#+END_SRC

** Misc options
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)                ;; Treat 'y' or <CR> as yes, 'n' as no.
  (define-key query-replace-map [return] 'act)
  (define-key query-replace-map [?\C-m] 'act)

  (setq inhibit-startup-screen t)
  ;; (setq initial-scratch-message nil)
  (setq scroll-conservatively 101)
  (setq scroll-error-top-bottom t)
  (setq require-final-newline t)
  (setq show-paren-delay 0.0)
  (setq show-paren-style 'mixed)
  (setq Man-width 114)
  (setq gc-cons-threshold 20000000)
  (setq calendar-week-start-day 1)
  ;; (setq split-width-threshold 120)
  (when window-system
    (setq confirm-kill-emacs 'y-or-n-p))
  (when (eq window-system 'x)
    (server-start))
  ;; (setq text-mode-hook
  ;;       '(turn-on-flyspell turn-on-auto-fill text-mode-hook-identify))
  (setq text-mode-hook
        '(turn-on-auto-fill text-mode-hook-identify))
  (setq-default truncate-lines t)
  (setq-default show-trailing-whitespace nil)

  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  (add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)
#+END_SRC

** GUI options
#+BEGIN_SRC emacs-lisp
  (setq use-dialog-box nil)
  ;; (setq custom-raised-buttons nil)
  (setq default-frame-alist
        '((width . 150)
          (height . 50)
          (top . 100)
          (left . 100)))
  (setq-default cursor-type 'bar)
  (if (eq system-type 'cygwin)
      (set-face-attribute 'default nil :font "Ubuntu Mono-12"))
#+END_SRC

** Mouse options
#+BEGIN_SRC emacs-lisp
  (setq focus-follows-mouse t)
  (setq mouse-autoselect-window t)
  (setq mouse-yank-at-point t)
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 5) ((control))))
  (cond ((equal (getenv "TERM") "xterm-256color")
         (xterm-mouse-mode t))
        ((equal (getenv "TERM") "xterm-16color")
         (xterm-mouse-mode t))
        ((equal (getenv "TERM") "xterm")
         (xterm-mouse-mode t))
        ((equal (getenv "TERM") "linux")
         (gpm-mouse-mode t)))
#+END_SRC

** Backups
#+BEGIN_SRC emacs-lisp
  (setq temporary-file-directory "~/tmp")
  (unless (file-directory-p temporary-file-directory)
      (mkdir temporary-file-directory))

  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  ;; (setq auto-save-file-name-transforms
  ;;       `((".*" ,temporary-file-directory t)))
#+END_SRC

** Minor modes
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (tooltip-mode 0)
  (when window-system
    (scroll-bar-mode 0))

  ;; (cua-mode t)
  (column-number-mode t)
  (line-number-mode t)
  (show-paren-mode t)
  (size-indication-mode t)
  (delete-selection-mode t)
  (transient-mark-mode t)
  (global-auto-revert-mode t)
  ;; (global-prettify-symbols-mode t)
  (global-subword-mode t)
  (recentf-mode t)
  ;; (when window-system
  ;;   (global-hl-line-mode t))

  (global-page-break-lines-mode t)
  (global-diff-hl-mode t)
  (beginend-global-mode t)
#+END_SRC

** Time
#+BEGIN_SRC emacs-lisp
  (setq display-time-24hr-format t)
  (setq display-time-day-and-date t)
  (setq display-time-default-load-average nil)
  (display-time-mode t)
#+END_SRC

** CMD line
#+BEGIN_SRC emacs-lisp
  (add-to-list 'command-switch-alist '("diff" . havner/command-line-diff))
#+END_SRC

** Tab related
#+BEGIN_SRC emacs-lisp
  (setq tab-always-indent 'complete)
  (setq backward-delete-char-untabify-method nil)
  (setq-default indent-tabs-mode t)
  (setq-default tab-width 8)

  (advice-add 'completion-at-point :around #'havner/completion-at-point)
#+END_SRC

** Undo/Redo
#+BEGIN_SRC emacs-lisp
  (require 'redo+)                  ;; autoloads empty, load manually
  (setq undo-no-redo t)

  (global-undo-tree-mode t)
#+END_SRC

** Point-undo
#+BEGIN_SRC emacs-lisp
  (require 'point-undo)
#+END_SRC

** AVY / Switch window
#+BEGIN_SRC emacs-lisp
  (setq avy-keys (append (number-sequence ?a ?z) (number-sequence ?A ?Z)))
  (setq avy-background t)
  (setq switch-window-increase 6)
#+END_SRC

** Buffer Show
#+BEGIN_SRC emacs-lisp
  (setq bs-configurations
        '(("all" nil nil nil nil nil)
          ("files" nil nil nil bs-visits-non-file bs-sort-buffer-interns-are-last)
          ("files-and-scratch" "^\\*scratch\\*$" nil nil bs-visits-non-file bs-sort-buffer-interns-are-last)
          ("all-intern-last" nil nil nil nil bs-sort-buffer-interns-are-last)
          ("havner" "^\\*terminal<[0-9]*>\\*$" nil nil bs-visits-non-file bs--sort-by-name)))
  (setq bs-default-configuration "havner")
#+END_SRC

** Bookmarks
#+BEGIN_SRC emacs-lisp
  (setq bm-restore-repository-on-load t)
  (setq bm-annotate-on-create nil)
  (setq-default bm-buffer-persistence t)
  (if window-system
      (setq-default bm-highlight-style 'bm-highlight-only-fringe)
    (setq-default bm-highlight-style 'bm-highlight-only-line))
  (require 'bm)
  (add-hook 'find-file-hooks 'bm-buffer-restore)
  (add-hook 'kill-buffer-hook 'bm-buffer-save)
  (add-hook 'kill-emacs-hook (lambda nil
                               (bm-buffer-save-all)
                               (bm-repository-save)))
  (add-hook 'after-save-hook 'bm-buffer-save)
  (add-hook 'after-revert-hook 'bm-buffer-restore)
#+END_SRC

** Nlinum
#+BEGIN_SRC emacs-lisp
  (require 'nlinum-hl)

  (if window-system
      (setq nlinum-format " %d")
    (setq nlinum-format " %d "))
#+END_SRC

** Whitespace
#+BEGIN_SRC emacs-lisp
  (setq whitespace-line-column 80)
  (cond (window-system
         (setq whitespace-style '(face tabs spaces trailing lines-tail space-mark tab-mark)))
        ((equal (getenv "TERM") "xterm-256color")
         (setq whitespace-style '(face tabs spaces trailing lines-tail space-mark tab-mark)))
        ((equal (getenv "TERM") "xterm-16color")
         (setq whitespace-style '(face tabs spaces trailing lines-tail space-mark tab-mark)))
        ((equal (getenv "TERM") "xterm")
         (setq whitespace-style '(face trailing lines-tail tab-mark)))
        ((equal (getenv "TERM") "linux")
         (setq whitespace-style '(face trailing lines-tail tab-mark))))
#+END_SRC

** Zoom
#+BEGIN_SRC emacs-lisp
  ;; (setq zoom-size '(0.618 . 0.618))
  ;; (setq zoom-ignored-buffer-name-regexps '("^*helm"))
  ;; (setq zoom-ignored-major-modes '(ediff-mode dired-mode))  ;; not working for Ediff :-(
  ;; (zoom-mode t)
#+END_SRC

** Desktop save
#+BEGIN_SRC emacs-lisp
  (when (eq window-system 'x)
    (setq desktop-base-file-name "desktop")
    (setq desktop-save 'ask-if-exists)
    (desktop-save-mode t))
#+END_SRC

** Projectile
#+BEGIN_SRC emacs-lisp
  (projectile-mode t)

  (setq projectile-mode-line '(:eval (format " P[%s]" (projectile-project-name))))
#+END_SRC

** Helm/IDO/IVY choose
#+BEGIN_SRC emacs-lisp
  (helm-mode t)
  ;; (ido-mode t)
  ;; (ivy-mode t)
#+END_SRC

** Helm
#+BEGIN_SRC emacs-lisp
  (when (eq helm-mode t)
    (helm-adaptive-mode t)
    (helm-descbinds-mode t)
    (setq helm-always-two-windows t)
    (setq helm-split-window-default-side 'right)  ;; other
    (setq helm-candidate-number-limit 1000)
    (setq helm-findutils-search-full-path t)
    (setq helm-bookmark-show-location t)
    ;; (setq helm-buffer-max-length 35)
    (setq helm-boring-buffer-regexp-list
          '("\\` "
            "\\`\\*helm"
            "\\`\\*Echo Area"
            "\\`\\*Minibuf"
            "\\`\\*buffer-selection")))
#+END_SRC

** IDO
#+BEGIN_SRC emacs-lisp
  (when (eq ido-mode 'both)
    (ido-vertical-mode t)
    (ido-ubiquitous-mode t)
    (flx-ido-mode t)
    (crm-custom-mode t)
    (smex-initialize)

    (setq ido-use-faces nil)       ;; disable ido faces to see flx highlights.
    (setq ido-use-filename-at-point 'guess)
    ;; (setq ido-vertical-define-keys 'C-n-C-p-up-down-left-right)
    ;; (setq ido-enable-flex-matching t)
    ;; (setq ido-file-extensions-order '(".org" ".el" "t"))
  )
#+END_SRC

** IVY
#+BEGIN_SRC emacs-lisp
  (when (eq ivy-mode t)
    (setq ivy-use-virtual-buffers t))
#+END_SRC

** EDE/Semantic
#+BEGIN_SRC emacs-lisp
  (setq ede-project-placeholder-cache-file nil)
  (setq project-linux-compile-project-command "gmake -j4 -C %s") ; EDE compilation command for kernel

  (setq semantic-c-dependency-system-include-path '("/usr/include" "/usr/local/include" "/usr/include/python3.5m"))
  (setq semantic-default-submodes '(
                                    global-semantic-idle-scheduler-mode
                                    global-semanticdb-minor-mode
                                    global-semantic-idle-summary-mode
                                    ;; global-semantic-idle-completions-mode
                                    ))
  (setq semanticdb-default-save-directory "~/.semanticdb")

  ;; (global-ede-mode t)
  (semantic-mode t)
#+END_SRC

** Company
#+BEGIN_SRC emacs-lisp
  (global-company-mode t)

  (setq company-backends
        '(company-jedi
          company-elisp
          company-files
          company-ispell))

  (setq company-idle-delay 0.5)
  (setq company-minimum-prefix-length 3)

  (setq company-clang-insert-arguments t)
  (setq company-semantic-insert-arguments t)
  (setq company-gtags-insert-arguments nil)

  (setq company-c-headers-path-system '("/usr/include/" "/usr/local/include/" "/usr/include/python3.5m"))
  (setq company-clang-executable "/usr/bin/clang++")
  (setq company-clang-arguments '("-std=c++11" "-I/usr/include/python3.5m"))
  (setq company-semantic-begin-after-member-access nil)
#+END_SRC

** gtags / helm-gtags / councel-gtags
#+BEGIN_SRC emacs-lisp
  (setq helm-gtags-use-input-at-cursor t)
#+END_SRC

** Powerline
#+BEGIN_SRC emacs-lisp
  (when window-system
    (powerline-default-theme))
#+END_SRC

** Dired
#+BEGIN_SRC emacs-lisp
  (setq dired-dwim-target t)
  (setq dired-listing-switches "-alhB --group-directories-first")
  (if (eq system-type 'darwin)                ;; fix for OSX dired
      (setq insert-directory-program "gls"))
#+END_SRC

** EDiff
#+BEGIN_SRC emacs-lisp
  (setq ediff-split-window-function 'split-window-horizontally)
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
#+END_SRC

** Flycheck
#+BEGIN_SRC emacs-lisp
  (setq-default flycheck-disabled-checkers '(c/c++-gcc python-flake8 python-pylint))

  (setq flycheck-clang-include-path '("/usr/include/python3.5m"))
  (setq flycheck-cppcheck-include-path '("/usr/include/python3.5m"))

  (setq flycheck-python-flake8-executable "flake8-3")
  (setq flycheck-python-pylint-executable "python3-pylint")

  (add-hook 'c++-mode-hook (lambda nil
                             (setq-local flycheck-c/c++-clang-executable "/usr/bin/clang++")
                             (setq-local flycheck-clang-args "-std=c++11")
                             ))

  (require 'flycheck-pycheckers)
  (setq flycheck-pycheckers-checkers '(pylint pep8 flake8))
  (setq flycheck-pycheckers-max-line-length 120)
  (with-eval-after-load 'flycheck
    (add-hook 'flycheck-mode-hook #'flycheck-pycheckers-setup))
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
  ;; (require 'magit-commit)
  ;; (require 'magit-popup)
  ;; (magit-define-popup-switch 'magit-rebase-popup
  ;;   ?f "Find a better common ancestor" "--fork-point")
  ;; (setq magit-repository-directories '(("~/devel/" . 2)))

  (if (eq ido-mode 'both)
    (setq magit-completing-read-function 'magit-ido-completing-read))
#+END_SRC

** Compile
#+BEGIN_SRC emacs-lisp
  (setq compilation-read-command nil)
  (setq compilation-scroll-output t)
#+END_SRC

** GDB
#+BEGIN_SRC emacs-lisp
  (setq gdb-many-windows t)
  (setq gdb-show-main t)
#+END_SRC

** Speedbar
#+BEGIN_SRC emacs-lisp
  ;; (setq speedbar-frame-parameters
  ;;       '((minibuffer)
  ;;         (width . 30)
  ;;         (border-width . 0)
  ;;         (menu-bar-lines . 0)
  ;;         (tool-bar-lines . 0)
  ;;         (unsplittable . t)
  ;;         (left-fringe . 0)))
  ;; (setq speedbar-use-images nil)
#+END_SRC

** PDF
#+BEGIN_SRC emacs-lisp
  (when (eq window-system 'x)
      (pdf-tools-install))
#+END_SRC

** TODO ORG (from hrs, concat, capture, minted, instapaper, etc)
#+BEGIN_SRC emacs-lisp
  (setq process-connection-type nil)  ;; makes it possible to use xdg-open

  (setq org-directory "~/Dropbox/Documents/org")
  (setq org-agenda-files '("~/Dropbox/Documents/org/index.org"))
  (setq org-default-notes-file "~/Dropbox/Documents/org/index.org")
  (setq org-mobile-directory "~/Dropbox/Apps/MobileOrg")
  (setq org-mobile-inbox-for-pull "~/Dropbox/Documents/org/from-mobile.org")
  (setq org-log-done 'time)
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-src-window-setup 'current-window)
  (setq org-startup-indented t)
  (setq org-support-shift-select t)
  (setq org-babel-python-command "python3")
  (setq org-confirm-babel-evaluate nil)
  (setq org-beamer-theme "Warsaw")

  (when (eq ido-mode 'both)
      (setq org-completion-use-ido t)
      (setq org-outline-path-complete-in-steps nil))

  (unless (eq system-type 'cygwin)
    (progn
      ;; (setq org-ellipsis "⤵")
      (add-hook 'org-mode-hook (lambda nil
                                 (org-bullets-mode t)))))
  (require 'ox-twbs)

  (org-babel-do-load-languages 'org-babel-load-languages '((emacs-lisp . t) (python . t) (C . t)))

  (setq org-latex-listings 'minted
        org-latex-packages-alist '(("" "minted"))
        org-latex-pdf-process
        '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

  (add-to-list 'org-structure-template-alist
               '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
  (add-to-list 'org-structure-template-alist
               '("tt" "#+TITLE: ?"))
  (add-to-list 'org-structure-template-alist
               '("at" "#+AUTHOR: ?"))

  (define-key org-mode-map [(control ?\')] nil)
#+END_SRC

** Delight (free your modeline)
#+BEGIN_SRC emacs-lisp
  (delight '(
             (beginend-global-mode nil "beginend")
             (beginend-bs-mode nil "beginend")
             (beginend-prog-mode nil "beginend")
             (beginend-dired-mode nil "beginend")
             (beginend-org-agenda-mode nil "beginend")
             (beginend-compilation-mode nil "beginend")
             (beginend-magit-status-mode nil "beginend")
             (org-indent-mode nil "org-indent")
             (company-mode nil "company")
             (helm-mode nil "helm-mode")
             (page-break-lines-mode nil "page-break-lines")
             (subword-mode nil "subword")
             (auto-revert-mode nil "autorevert")
             (auto-fill-function nil "simple")
             (abbrev-mode nil "abbrev")
             (helm-gtags-mode nil "helm-gtags")
             (paredit-mode nil "paredit")
             (undo-tree-mode nil "undo-tree")
             ))
#+END_SRC

* Programming modes
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook (lambda nil
                              (nlinum-mode t)
                              (hl-line-mode t)
                              (setq show-trailing-whitespace t)))
#+END_SRC

** C
#+BEGIN_SRC emacs-lisp
  (defvaralias 'c-basic-offset 'tab-width)
  (smart-tabs-insinuate 'c 'c++)
  (setq c-tab-always-indent nil)
  (setq c-insert-tab-function 'company-complete)

  (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
  ;; for "C-c o" ff-find-other-file (on #include):
  (setq cc-search-directories '("." "/usr/include" "/usr/local/include/*" "/usr/include/python3.5m"))

  (setq c-default-style
        '((c-mode . "linux")
          (c++-mode . "stroustrup")
          (java-mode . "java")
          (awk-mode . "awk")
          (other . "gnu")))

  (defun c-devel-hook()
    (c-set-offset 'innamespace 0)
    (c-set-offset 'inextern-lang 0)
    (flycheck-mode t)
    (setq-local company-backends
                '(company-c-headers
                  ;; company-clang
                  company-semantic
                  company-keywords
                  company-files
                  company-ispell))
    (cond ((eq helm-mode t)
           (helm-gtags-mode t))
          ((eq ivy-mode t)
           (counsel-gtags-mode t))
          (t
           (ggtags-mode t))))

  (add-hook 'c-mode-hook 'c-devel-hook)
  (add-hook 'c++-mode-hook 'c-devel-hook)
#+END_SRC

** Python
#+BEGIN_SRC emacs-lisp
  (defvaralias 'python-indent-offset 'tab-width)
  ;; (smart-tabs-insinuate 'python)

  (add-hook 'python-mode-hook (lambda nil
                                (flycheck-mode t)
                                (setq tab-width 4)
                                (setq indent-tabs-mode nil)
                                ))
#+END_SRC

** LUA
#+BEGIN_SRC emacs-lisp
  (defvaralias 'lua-indent-level 'tab-width)

  (add-hook 'lua-mode-hook (lambda nil
                             (setq tab-width 4)
                             ))
#+END_SRC

** Elisp
#+BEGIN_SRC emacs-lisp
  (require 'paredit-menu)

  (add-hook 'emacs-lisp-mode-hook (lambda nil
                                    (setq indent-tabs-mode nil)
                                    (paredit-mode t)
                                    (rainbow-delimiters-mode t)
                                    ))
#+END_SRC

** shell
#+BEGIN_SRC emacs-lisp
  (defvaralias 'sh-indentation 'tab-width)
  (defvaralias 'sh-basic-offset 'tab-width)

  (add-hook 'sh-mode-hook (lambda nil
                            (setq tab-width 4)
                            ))
#+END_SRC

** NXML
#+BEGIN_SRC emacs-lisp
  (defvaralias 'nxml-child-indent 'tab-width)
  (smart-tabs-insinuate 'nxml)

  (add-hook 'nxml-mode-hook (lambda nil
                              (setq tab-width 2)))
#+END_SRC

* Projects
#+BEGIN_SRC emacs-lisp
  (if (file-exists-p "~/.projects.el")
      (load-file "~/.projects.el"))
#+END_SRC

* Shortcuts
** Navigation
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-n") 'forward-paragraph)
  (global-set-key (kbd "M-p") 'backward-paragraph)
#+END_SRC

*** Description

left/right:
  - char
  - word
next/previous:
  - line
forward/backward:
  - char
  - word
  - line
  - sentence
  - paragraph

|-------+------------+-----------------|
|       | Ctrl       | Meta            |
|-------+------------+-----------------|
| f     | forw char  | forw word       |
| b     | back char  | back word       |
| n     | next line  | forw paragraph* |
| p     | prev line  | back paragraph* |
| e     | line end   | forw sentence   |
| a     | line begin | back sentence   |
|-------+------------+-----------------|
|       | (none)     | Ctrl            |
|-------+------------+-----------------|
| right | right char | right word      |
| left  | left char  | left word       |
| down  | next line  | forw paragraph  |
| up    | prev line  | back paragraph  |
|-------+------------+-----------------|

** No CUA-mode
#+BEGIN_SRC emacs-lisp
  ;; (global-set-key (kbd "C-c c") 'kill-ring-save)
  ;; (global-set-key (kbd "C-c x") 'kill-region)
  ;; (global-set-key (kbd "C-c v") 'yank)
  ;; (global-set-key (kbd "C-c C-v") 'yank-pop)
  (global-set-key (kbd "C-z") 'undo)
#+END_SRC

** Undo/Redo
#+BEGIN_SRC emacs-lisp
  ;; (global-set-key (kbd "C-_") 'undo)    ;; add others for symetry
  (global-set-key (kbd "M-_") 'redo)
  ;; (global-set-key (kbd "C-/") 'undo)
  (global-set-key (kbd "C-?") 'redo)
  ;; (global-set-key (kbd "C-z") 'undo)
  (global-set-key (kbd "M-z") 'redo)
  #+END_SRC

** Windows/buffers
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f6>") 'point-undo)              ;; do I need this? learn mark
  (global-set-key (kbd "<f7>") 'point-redo)

  (global-set-key (kbd "C-x <left>") 'windmove-left)
  (global-set-key (kbd "C-x <right>") 'windmove-right)
  (global-set-key (kbd "C-x <up>") 'windmove-up)
  (global-set-key (kbd "C-x <down>") 'windmove-down)

  (global-set-key (kbd "C-c <up>") 'buf-move-up)
  (global-set-key (kbd "C-c <down>") 'buf-move-down)
  (global-set-key (kbd "C-c <left>") 'buf-move-left)
  (global-set-key (kbd "C-c <right>") 'buf-move-right)
#+END_SRC

** Builtin modules
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x d") 'list-directory)
  (global-set-key (kbd "C-x C-d") 'dired)
  (global-set-key (kbd "C-s") 'isearch-forward-regexp)
  (global-set-key (kbd "C-r") 'isearch-backward-regexp)
  (global-set-key (kbd "C-c k") 'havner/kill-buffer-and-window-and-balance)
  (global-set-key (kbd "C-x k") 'havner/kill-current-buffer)
  (global-set-key (kbd "C-x 0") 'havner/delete-window-and-balance)
  (global-set-key (kbd "C-x 2") 'havner/split-window-below-and-switch)
  (global-set-key (kbd "C-x 3") 'havner/split-window-right-and-switch)

  (global-set-key (kbd "C-x C-j") 'dired-jump)
  (global-set-key (kbd "C-x t") 'toggle-truncate-lines)
  (global-set-key (kbd "C-c f") 'other-frame)
  (global-set-key (kbd "C-c C-f") 'make-frame)
  (global-set-key (kbd "C-c w") 'whitespace-mode)
  (global-set-key (kbd "C-x j") 'semantic-ia-fast-jump)
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c s") 'org-capture)
  (global-set-key (kbd "C-c a") 'org-agenda)

  (global-set-key (kbd "<f5>") 'compile)
  ;; (global-set-key (kbd "<C-f5>") 'ede-compile-project)

  (eval-after-load 'cc-mode
    '(progn
       (define-key c-mode-map (kbd "C-c o") 'ff-find-other-file)
       (define-key c++-mode-map (kbd "C-c o") 'ff-find-other-file)))
#+END_SRC

** External modules
#+BEGIN_SRC emacs-lisp
  ;; (global-set-key (kbd "%") 'havner/match-paren)
  (global-set-key (kbd "C-x F") 'havner/find-file-as-sudo)
  (global-set-key (kbd "C-x o") 'switch-window)
  (global-set-key (kbd "C-x w") 'windresize)
  (global-set-key (kbd "C-x C-b") 'bs-show)
  (global-set-key (kbd "C-c h") 'idle-highlight-mode)
  (global-set-key (kbd "C-c C-l") 'nlinum-mode)
  (global-set-key (kbd "C-c m") 'magit-status)
  (global-set-key (kbd "C-c C-m") 'magit-log-head)
  (global-set-key (kbd "C-c g") 'magit-dispatch-popup)
  (global-set-key (kbd "C-c C-g") 'magit-file-popup)
  (global-set-key (kbd "C-c t") 'sane-term)
  (global-set-key (kbd "C-c C-t") 'sane-term-create)
  (global-set-key (kbd "C-`") 'sane-term)
  (global-set-key (kbd "<C-f5>") 'projectile-compile-project)

  (global-set-key (kbd "C-'") 'avy-goto-word-1)
  (global-set-key (kbd "C-;") 'avy-pop-mark)
  (define-key isearch-mode-map (kbd "C-'") 'avy-isearch)
  (eval-after-load 'god-mode-isearch
    (define-key god-mode-isearch-map (kbd "'") 'avy-isearch))

  (global-set-key (kbd "<C-f2>") 'bm-toggle)
  (global-set-key (kbd "<f2>")   'bm-next)
  (global-set-key (kbd "<S-f2>") 'bm-previous)
  (global-set-key (kbd "<left-fringe> <mouse-5>") 'bm-next-mouse)
  (global-set-key (kbd "<left-fringe> <mouse-4>") 'bm-previous-mouse)
  (global-set-key (kbd "<left-fringe> <mouse-1>") 'bm-toggle-mouse)

  (eval-after-load 'company
    '(progn
       (define-key company-template-field-map (kbd "<tab>") nil)
       (define-key company-template-field-map '[?\t] nil)
       (define-key company-template-field-map (kbd "M-n") 'company-template-forward-field)
       (define-key company-template-nav-map (kbd "<tab>") nil)
       (define-key company-template-nav-map '[?\t] nil)
       (define-key company-template-nav-map (kbd "M-n") 'company-template-forward-field)))
#+END_SRC

** Helm/IDO/IVY cond
#+BEGIN_SRC emacs-lisp
  (cond ((eq helm-mode t)
         (global-set-key (kbd "M-x") 'helm-M-x)
         (global-set-key (kbd "C-h a") 'helm-apropos)
         (global-set-key (kbd "C-h m") 'helm-describe-modes)
         (global-set-key (kbd "M-y") 'helm-show-kill-ring)
         (global-set-key (kbd "C-x C-f") 'helm-find-files)
         (global-set-key (kbd "<f1>") 'helm-resume)
         (global-set-key (kbd "<f8>") 'helm-occur)
         (global-set-key (kbd "<f9>") 'helm-find)
         (global-set-key (kbd "<C-f9>") 'helm-locate)
         (global-set-key (kbd "C-x b") 'helm-buffers-list)
         (global-set-key (kbd "C-c i") 'helm-flyspell-correct)
         (global-set-key (kbd "C-c b") 'helm-bookmarks)
         (global-set-key (kbd "C-c n") 'helm-bm)
         (global-set-key (kbd "C-.") 'helm-imenu)
         (global-set-key (kbd "C-,") 'helm-imenu-in-all-buffers))
        ((eq ido-mode 'both)
         (global-set-key (kbd "M-x") 'smex)
         (global-set-key (kbd "M-X") 'smex-major-mode-commands)
         (global-set-key (kbd "C-c b") 'bookmark-bmenu-list)
         (global-set-key (kbd "C-c n") 'bm-show-all)
         (global-set-key (kbd "C-.") 'ido-imenu-anywhere)
         (global-set-key (kbd "C-,") 'ido-imenu-anywhere))
        ((eq ivy-mode t)
         (global-set-key (kbd "C-s") 'swiper)
         (global-set-key (kbd "<f1>") 'ivy-resume)
         (global-set-key (kbd "C-c b") 'bookmark-bmenu-list)
         (global-set-key (kbd "C-c n") 'bm-show-all)
         (global-set-key (kbd "C-.") 'ivy-imenu-anywhere)
         (global-set-key (kbd "C-,") 'ivy-imenu-anywhere)
         ;; (global-set-key (kbd "M-x") 'counsel-M-x)
         ;; (global-set-key (kbd "C-x C-f") 'counsel-find-file)
         ;; (global-set-key (kbd "<f1> f") 'counsel-describe-function)
         ;; (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
         ;; (global-set-key (kbd "<f1> l") 'counsel-find-library)
         ;; (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
         ;; (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
         ;; (global-set-key (kbd "C-c g") 'counsel-git)
         ;; (global-set-key (kbd "C-c j") 'counsel-git-grep)
         ;; (global-set-key (kbd "C-c k") 'counsel-ag)
         ;; (global-set-key (kbd "C-x l") 'counsel-locate)
         ;; (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
         ;; (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
         )
        (t
         (global-set-key (kbd "C-c b") 'bookmark-bmenu-list)
         (global-set-key (kbd "C-c n") 'bm-show-all)
         (global-set-key (kbd "C-.") 'imenu-anywhere)
         (global-set-key (kbd "C-,") 'imenu-anywhere)))

  (eval-after-load 'company
    '(when (eq helm-mode t)
       (define-key company-mode-map (kbd "<f3>") 'helm-company)
       (define-key company-active-map (kbd "<f3>") 'helm-company)))

  (eval-after-load 'flycheck
    '(if (eq helm-mode t)
         (define-key flycheck-mode-map (kbd "<f4>") 'helm-flycheck)
       (define-key flycheck-mode-map (kbd "<f4>") 'flycheck-list-errors)))

  (eval-after-load 'projectile
    '(if (eq helm-mode t)
         (define-key projectile-mode-map (kbd "<f10>") 'helm-projectile)
       (define-key projectile-mode-map (kbd "<f10>") 'projectile-commander)))

  ;;;;; regular gtags assign keys automatically

  (eval-after-load 'helm-gtags
    '(progn
       (define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-dwim)
       (define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack)))

  (eval-after-load 'counsel-gtags
    '(progn
       (define-key counsel-gtags-mode-map (kbd "M-.") 'counsel-gtags-dwim)
       (define-key counsel-gtags-mode-map (kbd "M-,") 'counsel-gtags-go-backward)))
#+END_SRC

** GOD mode
#+BEGIN_SRC emacs-lisp
  (when (bound-and-true-p god-global-mode)
    (global-set-key (kbd "<escape>") 'god-local-mode)
    (define-key god-local-mode-map (kbd "i") 'god-local-mode)
    (define-key isearch-mode-map (kbd "<escape>") 'god-mode-isearch-activate)
    (define-key god-mode-isearch-map (kbd "<escape>") 'god-mode-isearch-disable)

    (global-set-key (kbd "C-x C-1") 'delete-other-windows)
    (global-set-key (kbd "C-x C-0") 'havner/delete-window-and-balance)
    (global-set-key (kbd "C-x C-2") 'havner/split-window-below-and-switch)
    (global-set-key (kbd "C-x C-3") 'havner/split-window-right-and-switch)

    (global-set-key (kbd "C-x k") 'kmacro-keymap)
    (global-set-key (kbd "C-x C-k") 'havner/kill-current-buffer)
    (global-set-key (kbd "C-x b") 'bs-show)
    (global-set-key (kbd "C-x C-b") 'helm-buffers-list)
    (global-set-key (kbd "C-x o") 'delete-blank-lines)
    (global-set-key (kbd "C-x C-o") 'switch-window))
#+END_SRC

* TO BE REMOVED
** IDO
1. crm-custom
2. flx-ido
3. ido-completing-read+
4. ido-vertical-mode
5. smex

** Obsolete
1. ggtags
2. imenu-anywhere
